import { jsPDF } from 'jspdf';
import { Transaction } from '../types';
import { formatCurrency, formatDate } from './helpers';

export const generateTransactionReceipt = (transaction: Transaction, enterpriseName: string) => {
  // Create new document
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  // Set fonts
  doc.setFont('helvetica');

  // Colors
  const primaryColor = [0, 128, 128];  // Teal
  const textColor = [51, 51, 51];      // Dark gray
  const secondaryColor = [128, 128, 128]; // Medium gray
  const accentColor = transaction.type === 'income' ? [16, 185, 129] : [239, 68, 68]; // Green or Red

  // Page dimensions
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);

  // Add watermark
  doc.setFillColor(245, 245, 245);
  doc.setTextColor(...primaryColor);
  doc.setFontSize(120);
  doc.setGState(new doc.GState({ opacity: 0.05 }));
  doc.text(enterpriseName || 'HikmaCash', pageWidth / 2, pageHeight / 2, {
    align: 'center',
    angle: 45,
  });
  doc.setGState(new doc.GState({ opacity: 1 }));

  // Header
  doc.setFillColor(...primaryColor);
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text(enterpriseName || 'HikmaCash', margin, 25);

  // Receipt title
  doc.setTextColor(...textColor);
  doc.setFontSize(28);
  doc.text('Transaction Receipt', margin, 60);

  // Transaction status badge
  const badgeText = transaction.type === 'income' ? 'INCOME' : 'EXPENSE';
  const badgeWidth = doc.getTextWidth(badgeText) + 10;
  doc.setFillColor(...accentColor);
  doc.roundedRect(margin, 70, badgeWidth, 8, 2, 2, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(12);
  doc.text(badgeText, margin + 5, 75);

  // Main content
  doc.setTextColor(...textColor);
  doc.setFontSize(12);
  
  const details = [
    { label: 'Date', value: formatDate(transaction.date) },
    { label: 'Category', value: transaction.category },
    { label: 'Description', value: transaction.description },
    { label: 'Amount', value: formatCurrency(transaction.amount), highlight: true },
    { label: 'Transaction ID', value: transaction.id },
  ];

  let yPos = 90;
  details.forEach(({ label, value, highlight }, index) => {
    // Draw alternating background
    if (index % 2 === 0) {
      doc.setFillColor(250, 250, 250);
      doc.rect(margin, yPos - 5, contentWidth, 12, 'F');
    }

    // Label
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(...textColor);
    doc.text(label + ':', margin, yPos);

    // Value
    doc.setFont('helvetica', 'normal');
    if (highlight) {
      doc.setTextColor(...accentColor);
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setTextColor(...textColor);
    }
    doc.text(value, margin + 50, yPos);

    yPos += 15;
  });

  // Add QR code placeholder
  doc.setDrawColor(...secondaryColor);
  doc.setLineWidth(0.5);
  doc.rect(margin, yPos + 10, 30, 30);
  doc.setFontSize(8);
  doc.setTextColor(...secondaryColor);
  doc.text('Scan for verification', margin, yPos + 45);

  // Footer
  const footerY = pageHeight - 20;
  doc.setDrawColor(...secondaryColor);
  doc.setLineWidth(0.5);
  doc.line(margin, footerY - 10, pageWidth - margin, footerY - 10);

  doc.setFontSize(9);
  doc.setTextColor(...secondaryColor);
  
  // Footer text
  const footerText = `Generated by ${enterpriseName || 'HKM Cash'} on ${new Date().toLocaleString()}`;
  const footerText2 = 'This is an electronically generated receipt. No signature is required.';
  
  doc.text(footerText, margin, footerY);
  doc.text(footerText2, pageWidth - margin, footerY, { align: 'right' });

  // Save the PDF
  const fileName = `${enterpriseName || 'HikmaCash'}-Receipt-${transaction.id}.pdf`;
  doc.save(fileName);
};